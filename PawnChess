val BLACK_MOVEARRAY: MutableList<String> = mutableListOf()
val WHITE_MOVEARRAY: MutableList<String> = mutableListOf()
var BREAKLOOP: Boolean = false

fun main() {
    println("Pawns-Only Chess")
    println("First Player's name:")
    val playerOne = readln()
    println("Second Player's name:")
    val playerTwo = readln()

    val chessBoard = mutableListOf(
        mutableListOf<String>("", "", "", "", "", "", "", ""),
        mutableListOf<String>("", "", "", "", "", "", "", ""),
        mutableListOf<String>("", "", "W", "", "", "W", "", ""),
        mutableListOf<String>("", "", "", "", "", "", "", ""),
        mutableListOf<String>("", "", "B", "", "", "B", "", ""),
        mutableListOf<String>("", "", "", "", "", "", "", ""),
        mutableListOf<String>("", "", "", "", "", "", "", ""),
        mutableListOf<String>("", "", "", "", "", "", "", "")
    )


    printCurrentBoard(chessBoard)

    var gameContinue = true
    var playerOnesTurn = true

    loop@ while(gameContinue && !BREAKLOOP) {
        when(playerOnesTurn) {
            true -> {
                println("$playerOne's turn:")
                WHITE_MOVEARRAY.add(readln())
                if(WHITE_MOVEARRAY.last().equals("exit")) {
                    print("Bye!")
                    gameContinue = false
                } else if (updateChessBoard(chessBoard, WHITE_MOVEARRAY.last(), "white pawn")) {
                    if(WHITE_MOVEARRAY.last().contains("8") || !isPawnExist("B", chessBoard)) {
                        println("White Wins!\nBye!")
                        break@loop
                    } else playerOnesTurn = false
                } else playerOnesTurn = true
            }
            false -> {
                println("$playerTwo's turn:")
                BLACK_MOVEARRAY.add(readln())
                if(BLACK_MOVEARRAY.last().equals("exit")) {
                    println("Bye!")
                    gameContinue = false
                } else if (updateChessBoard(chessBoard, BLACK_MOVEARRAY.last(), "black pawn")) {
                    if(BLACK_MOVEARRAY.last().contains("1") || !isPawnExist("W", chessBoard)) {
                        println("Black Wins!\nBye!")
                        break@loop
                    } else playerOnesTurn = true
                } else playerOnesTurn = false
            }
        }
    }

}


fun isPawnExist(pawn: String, chessBoard: MutableList<MutableList<String>>): Boolean {
    for (row in chessBoard) {
        for(element in row){
            if(element.equals(pawn))
                return true
        }
    }
    return false
}

fun getCurrentLocation(pawn: String, chessBoard: MutableList<MutableList<String>>): MutableList<String> {
    val currentLocation: MutableList<String> = mutableListOf()
    for (row in 0..7) {
        for(i in 0..7){
            if(chessBoard[row][i].equals(pawn)){
                currentLocation.add("$row$i")
            }
        }
    }
    return currentLocation
}

fun updateChessBoard(chessBoard: MutableList<MutableList<String>>, lastMove: String, move: String): Boolean {
    val regex = Regex("[a-h][1-8][a-h][1-8]")
    if(regex.matches(lastMove)) {
        val charList = lastMove.toList()
        val c1: Int = letterToNum(charList[0])
        val n1: Int = charList[1].code - 49
        val c2: Int = letterToNum(charList[2])
        val n2: Int = charList[3].code - 49

        val data1 = chessBoard[n1][c1]
        val data2 = chessBoard[n2][c2]

        try{

            if (n2 - n1 > 2 || n1 - n2 > 2){
                println("Invalid Input")
            } else if (n2 - n1 == 2 && n1!= 1){
                println("Invalid Input")
            } else if (n1 - n2 == 2 && n1!= 6){
                println("Invalid Input")
            } else if ( c2 - c1 > 1 || c1 - c2 > 1) {
                println("Invalid Input")
            } else if (c1 != c2 && chessBoard[n2][c2].isBlank()) {
                if (move.contains("white") && n1 == 4 && chessBoard[n1][c2].equals("B") && BLACK_MOVEARRAY.last().contains("${charList[2]}7${charList[2]}5") ) {
                    chessBoard[n2][c2] = data1
                    chessBoard[n1][c2] = ""
                    chessBoard[n1][c1] = ""
                    printCurrentBoard(chessBoard)
                    return true
                } else if (move.contains("black") && n1 == 3 && chessBoard[n1][c2].equals("W") && WHITE_MOVEARRAY.last().contains("${charList[2]}2${charList[2]}4")) {
                    chessBoard[n2][c2] = data1
                    chessBoard[n1][c2] = ""
                    chessBoard[n1][c1] = ""
                    printCurrentBoard(chessBoard)
                    return true
                } else println("Invalid Input")
            } else if (chessBoard[n1][c1].isBlank()) {
                println("No $move at ${charList[0]}${charList[1]}")
            } else if (c1 == c2 && n1 == n2) {
                println("Invalid Input")
            } else if((move.contains("white") && data1.equals("W")) || (move.contains("black") && data1.equals("B"))) {

                    if( move.contains("white") && n2 < n1 ){
                        println("Invalid Input")
                    } else if( move.contains("black") && n1 < n2 ) {
                        println("Invalid Input")
                    } else if (c1 == c2 && data1.isNotBlank() && data2.isNotBlank()) {
                        println("Invalid Input")
                    } else {
                        chessBoard[n2][c2] = data1
                        chessBoard[n1][c1] = ""
                        printCurrentBoard(chessBoard)

                        if (move.contains("white") && isPawnExist("B", chessBoard)) {
                                val list = getCurrentLocation("B", chessBoard)
                                var isStalemate: Boolean = true
                                test@for(it in list){
                                    val ch: CharArray = it.toCharArray()
                                    val ch1: Int = ch[0].code - 48
                                    val ch2: Int = ch[1].code - 48

                                    if(ch1 >= 1 ) {
                                        if (chessBoard[ch1 - 1][ch2].equals("")) {
                                            isStalemate = false
                                            break@test
                                        } else if (ch2 != 7 && chessBoard[ch1 - 1][ch2 + 1].equals("W")) {
                                            isStalemate = false
                                            break@test
                                        } else if (ch2 != 0 && chessBoard[ch1 - 1][ch2 - 1].equals("W")) {
                                            isStalemate = false
                                            break@test
                                        }
                                    }
                                }
                                if(isStalemate) {
                                    println("Stalemate!\nBye!")
                                    BREAKLOOP = true
                                }
                        } else if (move.contains("black") && isPawnExist("W", chessBoard)) {
                            val list = getCurrentLocation("W", chessBoard)
                            var isStalemate: Boolean = true
                            test1@for(it in list){
                                val ch: CharArray = it.toCharArray()
                                val ch1: Int = ch[0].code - 48
                                val ch2: Int = ch[1].code - 48

                                if(ch1 <= 6 ) {
                                    if (chessBoard[ch1 + 1][ch2].equals("")) {
                                        isStalemate = false
                                        break@test1
                                    } else if (ch2 != 7 && chessBoard[ch1 + 1][ch2 + 1].equals("B")) {
                                        isStalemate = false
                                        break@test1
                                    } else if (ch2 != 0 && chessBoard[ch1 + 1][ch2 - 1].equals("B")) {
                                        isStalemate = false
                                        break@test1
                                    }
                                }
                            }
                            if(isStalemate) {
                                println("Stalemate!\nBye!")
                                BREAKLOOP = true
                            }
                        }

                        return true
                    }
                } else if ( move.contains("white") && !data1.equals("W") || (move.contains("black") && !data1.equals("B")) ) {
                    println("No $move at ${charList[0]}${charList[1]}")
                } else {
                    println("Invalid Input")
                }
        }catch(e: Exception) {
            println("Invalid Input")
            return false
        }


    } else {
        println("Invalid Input")
    }
    return false
}

fun letterToNum(ch: Char): Int {
    when(ch) {
        'a' -> return 0
        'b' -> return 1
        'c' -> return 2
        'd' -> return 3
        'e' -> return 4
        'f' -> return 5
        'g' -> return 6
        'h' -> return 7
        else -> return 9
    }
}

fun printCurrentBoard(chessBoard: MutableList<MutableList<String>>) {
    for(i in chessBoard.size downTo 1){
        println("\n  +---+---+---+---+---+---+---+---+")
        print("$i |")
        for(item in chessBoard[i-1]){
            if(item.equals("")) print("   |") else print(" $item |")
        }
        if(i==1) println("\n  +---+---+---+---+---+---+---+---+\n    a   b   c   d   e   f   g   h")
    }
}
